version: '3'

env:
  TASK_VERSION: '3.35'
  COREUTILS_VERSION: '9.4'
  BASH_VERSION: '5'
  ANSIBLE_VERSION: '2.16'
  OPENSSH_VERSION: '9.7'
  JETPORCH_VERSION: '0.0.1'
  PROVISIONER_REPO_PATH: '{{.TASKFILE_DIR}}'
  PROJECT_REPO_PATH: '{{.ROOT_DIR}}'
  ANSIBLE_INVENTORY_SCRIPT_PATH: '{{.PROVISIONER_REPO_PATH}}/inventory-ansible.pkgx'
  ANSIBLE_PLAYBOOKS_PATH: '{{.PROVISIONER_REPO_PATH}}/playbooks'
  ANSIBLE_ROLES_PATH: '{{.PROVISIONER_REPO_PATH}}/roles'

tasks:
  default:
    silent: true
    cmds:
    - task --list

  init:
    cmds:
      - |
        pkgx +ansible.com^{{.ANSIBLE_VERSION}} ansible-galaxy \
             collection install community.general

  with-clean-env:
    internal: true
    cmds:
    - |
      
      pkgx +gnu.org/coreutils^{{.COREUTILS_VERSION}} env \
           --split-string \
           --ignore-environment \
           REMOTE_FQDN="{{.REMOTE_FQDN}}" \
           REMOTE_USER="{{.REMOTE_USER}}" \
           USER="{{.USER}}" \
           HOME="{{.HOME}}" \
           PATH="{{.HOME}}/.pkgx/bin:/bin:/usr/bin:/usr/local/bin" \
           PROJECT_REPO_PATH='{{.PROJECT_REPO_PATH}}' \
           pkgx +gnu.org/bash^{{.BASH_VERSION}} bash \
                --login \
                --noprofile \
                --norc \
                - <<'EOF'
                {{- range $line := splitList "\n" .COMMAND_SCRIPT}}
                {{$line -}}
                {{- end}}
      EOF

  test:
    vars:
      COMMAND_SCRIPT: |
        echo A
        echo B
        echo C
    cmds:
    - task: with-clean-env
      vars:
        COMMAND_SCRIPT: '{{.COMMAND_SCRIPT}}'

  install:
    desc: prepare JupyterHub instance with Ansible playbooks
    vars:
      ANSIBLE_TAGS: 'install'
      CONSTRUCTOR_SSH_KEY_PATH:
        sh: |
          pkgx +taskfile.dev^{{.TASK_VERSION}} task \
               --silent \
               --taskfile '{{.PROJECT_REPO_PATH}}/Taskfile.yaml' \
               constructor:get_ssh_key_path
      COMMAND_SCRIPT: |
        eval "$(pkgx +openssh.com^{{.OPENSSH_VERSION}} ssh-agent)" 2>&1 > /dev/null
        pkgx +openssh.com^{{.OPENSSH_VERSION}} ssh-add -q '{{.CONSTRUCTOR_SSH_KEY_PATH}}' 2>&1 > /dev/null
        #export ANSIBLE_SSH_USER='{{.REMOTE_USER}}'
        export HUB_PERSISTENT_VOLUME_PATH='{{.HUB_PERSISTENT_VOLUME_PATH}}'
        export JUPYTERHUB_FQDN='{{.JUPYTERHUB_FQDN}}'
        export NOVNC_FQDN='{{.NOVNC_FQDN}}'
        export FILESERVER_EXPORT_PATH='{{.FILESERVER_EXPORT_PATH}}'
        export ANSIBLE_ROLES_PATH="{{.ANSIBLE_ROLES_PATH}}"
        export ANSIBLE_HOST_KEY_CHECKING=false
        pkgx +ansible.com^{{.ANSIBLE_VERSION}} ansible-playbook \
             --tags '{{.ANSIBLE_TAGS}}' \
             --inventory '{{.ANSIBLE_INVENTORY_SCRIPT_PATH}}' \
             '{{.ANSIBLE_PLAYBOOKS_PATH}}/main.yaml'
        pkgx +openssh.com^{{.OPENSSH_VERSION}} ssh-agent -k
    cmds:
    - task: with-clean-env
      vars:
        COMMAND_SCRIPT: '{{.COMMAND_SCRIPT}}'


  configure:
    desc: configure JupyterHub instance with Ansible playbooks
    vars:
      ANSIBLE_TAG: 'configure'
      CONSTRUCTOR_SSH_KEY_PATH:
        sh: |
          pkgx +taskfile.dev^{{.TASK_VERSION}} task \
               --silent \
               --taskfile '{{.PROJECT_REPO_PATH}}/Taskfile.yaml' \
               constructor:get_ssh_key_path
      COMMAND_SCRIPT: |
        eval "$(pkgx +openssh.com^{{.OPENSSH_VERSION}} ssh-agent)" 2>&1 > /dev/null
        pkgx +openssh.com^{{.OPENSSH_VERSION}} ssh-add -q '{{.CONSTRUCTOR_SSH_KEY_PATH}}' 2>&1 > /dev/null
        export HUB_PERSISTENT_VOLUME_PATH="{{.HUB_PERSISTENT_VOLUME_PATH}}"
        export JUPYTERHUB_FQDN="{{.JUPYTERHUB_FQDN}}"
        export NOVNC_FQDN="{{.NOVNC_FQDN}}"
        export FILESERVER_EXPORT_PATH="{{.FILESERVER_EXPORT_PATH}}"
        export HOME_PREFIX="{{.HOME_PREFIX}}"
        export ANSIBLE_ROLES_PATH="{{.ANSIBLE_ROLES_PATH}}"
        pkgx +ansible.com^{{.ANSIBLE_VERSION}} ansible-playbook \
             --tags '{{.ANSIBLE_TAGS}}' \
             --inventory '{{.ANSIBLE_INVENTORY_SCRIPT_PATH}}' \
             '{{.ANSIBLE_PLAYBOOKS_PATH}}/main.yaml'
        pkgx +openssh.com^{{.OPENSSH_VERSION}} ssh-agent -k
    cmds:
    - task: with-clean-env
      vars:
        COMMAND_SCRIPT: '{{.COMMAND_SCRIPT}}'

  #
  # the image_build constructor needs this task, even empty
  #
  tests:
    cmds:
    - true

  jetp_install:
    #desc: prepare instance with recipes
    cmds:
    - |
      pkgx +gnu.org/coreutils^{{.COREUTILS_VERSION}} env \
           --split-string \
           --ignore-environment \
           REMOTE_FQDN="{{.REMOTE_FQDN}}" \
           REMOTE_USER="{{.REMOTE_USER}}" \
           USER="{{.USER}}" \
           HOME="{{.HOME}}" \
           PATH="{{.HOME}}/.pkgx/bin:/bin:/usr/bin:/usr/local/bin" \
           pkgx +gnu.org/bash^{{.BASH_VERSION}} bash \
                --login \
                --noprofile \
                --norc \
                - <<'EOF'
                  #eval "$(pkgx --shellcode)"
                  source ../Taskfile.env
                  eval "$(pkgx +openssh.com^{{OPENSSH_VERSION}} ssh-agent)"  2>&1 > /dev/null
                  pkgx +openssh.com^{{OPENSSH_VERSION}} ssh-add $CONSTRUCTOR_SSH_KEY_PATH
                  pkgx +openssh.com^{{OPENSSH_VERSION}} ssh-add -L
                  export INVENTORY="./inventory.pkgx"
                  export PLAYBOOKS="./playbooks"
                  export ROLES="./roles"
                  pkgx +jetporch.com^{{.JETPORCH_VERSION}} jetp ssh \
                      --inventory "${INVENTORY}" \
                      --playbook "${PLAYBOOKS}/install.yml" \
                      --roles "${ROLES}" \
                      -vvv
                  pkgx +openssh.com^{{.OPENSSH_VERSION}} ssh-agent -k
      EOF